{"version":3,"sources":["webpack:///node_modules/rxjs/_esm2015/internal/observable/interval.js","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","webpack:///src/app/containers/form/form_json.ts","webpack:///src/app/appservice.service.ts","webpack:///src/app/views/formbuilder/formbuilder.component.ts","webpack:///src/app/views/formbuilder/formbuilder.component.html","webpack:///src/app/views/formbuilder/formbuilder.component.scss","webpack:///src/app/views/formbuilder/formbuilder-routing.module.ts","webpack:///src/app/views/formbuilder/formbuilder.module.ts"],"names":["dispatch","state","subscriber","counter","period","next","this","schedule","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","toggleVisibility","styles","position","top","opacity","left","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","_viewportRuler","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","event","target","cachedPosition","get","scrolledParentNode","documentElement","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","_a","passiveEventListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","Subject","_pointerMoveSubscription","Subscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","find","handle","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","Math","abs","_pickupPositionOnPage","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_dropContainer","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","_toggleNativeDragInteractions","_placeholder","getPlaceholderElement","getRootElement","handles","disabledHandles","add","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","_ownerSVGElement","ownerSVGElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","transform","delete","direction","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","body","appendChild","replaceChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","pointerMove","pointerUp","scroll","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","_cachedShadowRoot","round","min","max","removeChild","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_draggables","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","scheduler","isNumeric","Observable","animationFrame","pipe","takeUntil","_scrollNode","scrollStep","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","index","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","splice","parentElement","_shouldEnterAsFirstChild","reference","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","filter","every","_cacheItems","connectedTo","slice","orientation","_scrollableElements","findIndex","reverse","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","window","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","elementToMeasure","getVisibleElement","sort","a","b","_stopReceiving","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","nativeElement","activeSiblings","_sortFromLastPointerPosition","draggedItems","_startReceiving","predicate","amount","scrollBy","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","instance","ɵfac","t","ɵprov","factory","token","providedIn","ctorParameters","decorators","args","DEFAULT_CONFIG","DragDrop","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","ɵdir","selectors","inputs","exportAs","features","provide","useExisting","propDecorators","CDK_DRAG_CONFIG","_uniqueIdCounter","CDK_DROP_LIST","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","_destroyed","id","_unsortedItems","_dropListRef","createDropList","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_syncItemsWithRef","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","dispose","ref","startWith","withDirection","correspondingDropList","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","hostAttrs","hostVars","hostBindings","rf","ctx","outputs","useValue","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CdkDrag","_viewContainerRef","_selfHandle","observer","subscription","movedEvent","createDrag","addItem","_syncInputs","reset","getFreeDragPosition","onStable","take","_updateRootElement","changes","tap","childHandleElements","rootElementSelector","withHandles","switchMap","merge","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","getClosestMatchingAncestor","boundary","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","_b","currentElement","matches","msMatchesSelector","contentQueries","dirIndex","_t","first","descendants","DragDropModule","ɵmod","ɵinj","providers","imports","ngJitMode","declarations","exports","formItems","FormId","FieldLable","Fieldname","icon","code","DBColName","Label","PlaceHolder","ErrorTxt","ID","Class","Required","HelpTxt","pKeyFilter","pKeyFilterOther","functionName","Disabled","ForceDisabled","MaxTextLength","OptionsURL","Option","optlable","optCode","showclear","row","col","dateformat","showTime","timeOnly","accept","maxsize","LabelIcon","AppserviceService","console","log","FormbuilderComponent","service","messageService","route","user","location","tableandform","done","ModuleID","snapshot","queryParams","getFormSchema","objh","JSON","parse","Form","updateOptionbyurl","updateAngForm","error","currentArray","targetArray","targetIndex","createCopy","random","toString","substring","orig","stringify","action","param","LNo","CreateFormData","severity","summary","detail","back","static","routes","path","component","title","FormbuilderRoutingModule","FormbuilderModule"],"mappings":"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","file":"x","sourcesContent":["import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n//# sourceMappingURL=interval.js.map","import { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @docs-private\n */\nfunction toggleVisibility(element, enable) {\n    const styles = element.style;\n    styles.position = enable ? '' : 'fixed';\n    styles.top = styles.opacity = enable ? '' : '0';\n    styles.left = enable ? '' : '-999em';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = this._parentDragRef = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const preview = this._preview = this._createPreviewElement();\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document, shadowRoot).appendChild(preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp(x, minX, maxX);\n            y = clamp(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = event.target;\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef, shadowRoot) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return shadowRoot ||\n        documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp$1(fromIndex, array.length - 1);\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -scrollStep);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, scrollStep);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return (index === -1 || !this.sortPredicate(index, item, this)) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) && items.every(item => {\n            // Note that we have to add an exception to the `enterPredicate` for items that started off\n            // in this drop list. The drag ref has logic that allows an item to return to its initial\n            // container, if it has left the initial container and none of the connected containers\n            // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n            return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n        })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` +\n            `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate =\n            (index, drag, drop) => {\n                return this.sortPredicate(index, drag.data, drop.data);\n            };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: ScrollDispatcher },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    sortPredicate: [{ type: Input, args: ['cdkDropListSortPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    autoScrollStep: [{ type: Input, args: ['cdkDropListAutoScrollStep',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[attr.id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], sortPredicate: [{\n            type: Input,\n            args: ['cdkDropListSortPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], autoScrollStep: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollStep']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            var _a, _b;\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                // `classList` needs to be null checked, because IE doesn't have it on some elements.\n                if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDrag.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag._dragInstances = [];\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] },\n    { type: CdkDrag, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [CDK_DRAG_PARENT,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': DRAG_HOST_CLASS,\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }, { type: CdkDrag, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = function DragDropModule_Factory(t) { return new (t || DragDropModule)(); };\nDragDropModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n//# sourceMappingURL=drag-drop.js.map","\r\nexport const formItems: any[] = [\r\n    //inputtext\r\n    {\r\n      FormId: '',\r\n      FieldLable: 'Text Field',\r\n      Fieldname: 'inputtext',\r\n      icon:'fa-text-width',\r\n      size: { name: \"12\", code: 12},\r\n      DBColName: 'inputtxt',\r\n      Label: 'Text Field',\r\n      PlaceHolder: 'Text Field',\r\n      ErrorTxt: '',\r\n      ID: '',\r\n      Class: '',\r\n      Required: false,\r\n      HelpTxt: '',\r\n      pKeyFilter:{ name: \"All\", code: \"all\"},\r\n      pKeyFilterOther: \"\",\r\n      functionName: \"\",\r\n      Disabled: false,\r\n      ForceDisabled: false,\r\n      MaxTextLength: 32,\r\n    },\r\n    //password\r\n    {\r\n      FormId: '',\r\n      FieldLable: 'Password Field',\r\n      Fieldname: 'inputpassword',\r\n      icon:'fa-key ',\r\n      size: { name: \"12\", code: 12},\r\n      DBColName: 'inputpass',\r\n      Label: 'Password Field',\r\n      PlaceHolder: 'Password Field',\r\n      ErrorTxt: '',\r\n      ID: '',\r\n      Class: '',\r\n      Required: false,\r\n      HelpTxt: '',\r\n      functionName: \"\",\r\n      Disabled: false,\r\n      ForceDisabled: false,\r\n    },\r\n    //dropdown\r\n    {\r\n      FormId: '',\r\n      FieldLable: 'Drop Down',\r\n      Fieldname: 'dropdown',\r\n      icon:'fa-caret-square-o-down',\r\n      size: { name: \"12\", code: 12},\r\n      DBColName: 'inputtxt',\r\n      Label: 'Drop Down',\r\n      PlaceHolder: 'Drop Down',\r\n      ErrorTxt: '',\r\n      ID: '',\r\n      Class: '',\r\n      Required: false,\r\n      HelpTxt: '',\r\n      functionName: \"\",\r\n      OptionsURL: \"\",\r\n      Option: [],\r\n      optlable: 'name',\r\n      optCode: 'code',\r\n      filter: true,\r\n      showclear: true,\r\n      Disabled: false,\r\n      ForceDisabled: false,\r\n    },\r\n    //multiselect\r\n    {\r\n      FormId: '',\r\n      FieldLable: 'MultiSelect',\r\n      Fieldname: 'multiselect',\r\n      icon:'fa-caret-square-o-down',\r\n      size: { name: \"12\", code: 12},\r\n      DBColName: 'inputtxt',\r\n      Label: 'Drop Down MultiSelect',\r\n      PlaceHolder: 'Drop Down MultiSelect',\r\n      ErrorTxt: '',\r\n      ID: '',\r\n      Class: '',\r\n      Required: false,\r\n      HelpTxt: '',\r\n      functionName: \"\",\r\n      OptionsURL: \"\",\r\n      Option: [],\r\n      optlable: 'name',\r\n      optCode: 'code',\r\n      filter: true,\r\n      showclear: true,\r\n      Disabled: false,\r\n      ForceDisabled: false,\r\n    },\r\n    //inputtext\r\n    {\r\n      FormId: '',\r\n      FieldLable: 'Text Area',\r\n      Fieldname: 'textarea',\r\n      icon:'fa-square-o',\r\n      size: { name: \"12\", code: 12},\r\n      DBColName: 'inputtxt',\r\n      Label: 'Text Area',\r\n      PlaceHolder: 'Text Area',\r\n      ErrorTxt: '',\r\n      ID: '',\r\n      Class: '',\r\n      Required: false,\r\n      HelpTxt: '',\r\n      functionName: \"\",\r\n      row: 5,\r\n      col: 50,\r\n      Disabled: false,\r\n      ForceDisabled: false,\r\n      MaxTextLength: 500,\r\n    },\r\n    //calander\r\n    {\r\n      FormId: '',\r\n      FieldLable: 'Date Picker',\r\n      Fieldname: 'calander',\r\n      icon:'fa-calendar',\r\n      size: { name: \"12\", code: 12},\r\n      DBColName: 'inputtxt',\r\n      Label: 'Date Picker',\r\n      ErrorTxt: '',\r\n      ID: '',\r\n      Class: '',\r\n      Required: false,\r\n      HelpTxt: '',\r\n      functionName: \"\",\r\n      dateformat:'dd.mm.yy',\r\n      showTime: false,\r\n      timeOnly: false,\r\n      Disabled: false,\r\n      ForceDisabled: false,\r\n    },\r\n    //editor\r\n    {\r\n      FormId: '',\r\n      FieldLable: 'wysiwyg Editor',\r\n      Fieldname: 'editor',\r\n      icon:'fa-pencil-square',\r\n      size: { name: \"12\", code: 12},\r\n      DBColName: 'inputtxt',\r\n      Label: 'Text Editor',\r\n      ErrorTxt: '',\r\n      ID: '',\r\n      Class: '',\r\n      Required: false,\r\n      HelpTxt: '',\r\n      functionName: \"\",\r\n      Disabled: false,\r\n      ForceDisabled: false,\r\n    },\r\n    //inputswitch\r\n    {\r\n      FormId: '',\r\n      FieldLable: 'Switch',\r\n      Fieldname: 'inputswitch',\r\n      icon:'fa-check-circle',\r\n      size: { name: \"12\", code: 12},\r\n      DBColName: 'inputtxt',\r\n      Label: 'Switch',\r\n      PlaceHolder: 'Switch',\r\n      ErrorTxt: '',\r\n      ID: '',\r\n      Class: '',\r\n      Required: false,\r\n      HelpTxt: '',\r\n      functionName: \"\",\r\n      Disabled: false,\r\n      ForceDisabled: false,\r\n    },\r\n    //inputtext\r\n    {\r\n      FormId: '',\r\n      FieldLable: 'upload',\r\n      Fieldname: 'upload',\r\n      icon:'fa-cloud-upload ',\r\n      size: { name: \"12\", code: 12},\r\n      DBColName: 'inputupload',\r\n      Label: 'Upload',\r\n      PlaceHolder: 'Upload',\r\n      ErrorTxt: '',\r\n      ID: '',\r\n      Class: '',\r\n      Required: false,\r\n      HelpTxt: '',\r\n      accept: 'image/*',\r\n      maxsize: '1090000',\r\n      Disabled: false,\r\n      ForceDisabled: false,\r\n    },\r\n    //submitbutton\r\n    {\r\n      FormId: '',\r\n      FieldLable: 'Submit Button',\r\n      Fieldname: 'submitbutton',\r\n      icon:'fa-check',\r\n      size: { name: \"12\", code: 12},\r\n      Label: 'Submit',\r\n      LabelIcon: 'pi pi-check',\r\n      ID: '',\r\n      Class: 'p-button-secondary',\r\n      functionName: \"\",\r\n      Disabled: false,\r\n      ForceDisabled: false,\r\n    }\r\n  ];\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppserviceService {\r\n\r\n  constructor() { }\r\n\r\n  edited(e:any){\r\n    console.log(e);\r\n    \r\n  }\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport {CdkDragDrop, moveItemInArray, copyArrayItem, transferArrayItem} from '@angular/cdk/drag-drop';\r\nimport {formItems} from '../../containers/form/form_json';\r\nimport {AppserviceService} from '../../appservice.service';\r\nimport { FormAndTableService, UserService } from '../../_services';\r\nimport { ActivatedRoute, Router  } from '@angular/router';\r\nimport {MessageService} from 'primeng/api';\r\nimport { Location } from '@angular/common';\r\n\r\n\r\n@Component({\r\n  selector: 'app-formbuilder',\r\n  templateUrl: './formbuilder.component.html',\r\n  styleUrls: ['./formbuilder.component.scss'],\r\n  providers: [MessageService]\r\n})\r\nexport class FormbuilderComponent implements OnInit {\r\n\r\n  public formItems = formItems;\r\n  public done:any = [];\r\n  ModuleID: string = '';\r\n  @ViewChild('Form', {static: false}) Form:any;\r\n\r\n\r\n  constructor(public service: AppserviceService,\r\n     private messageService: MessageService,\r\n     private route: ActivatedRoute,\r\n     private user: UserService,\r\n     private location: Location,\r\n     private tableandform : FormAndTableService,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.ModuleID = this.route.snapshot.queryParams['ModuleID'] || '';\r\n\r\n    this.tableandform.getFormSchema(this.ModuleID).subscribe(\r\n      data => {\r\n        data['results'].forEach(element => {\r\n          var objh = JSON.parse(element);\r\n          this.done.push(objh);\r\n          if(objh.Fieldname == 'dropdown'){\r\n            this.Form.updateOptionbyurl(objh);\r\n          }\r\n          if(objh.Fieldname == 'multiselect'){\r\n            this.Form.updateOptionbyurl(objh);\r\n          }\r\n\r\n          this.Form.updateAngForm();\r\n        });\r\n      },\r\n      error => { }\r\n    );\r\n  }\r\n\r\n  drop(event: CdkDragDrop<string[]>) {\r\n    if (event.previousContainer === event.container) {\r\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n\r\n    } else {\r\n\r\n      copyArrayItem(this.createCopy(event.previousContainer.data),\r\n        event.container.data,\r\n        event.previousIndex,\r\n        event.currentIndex);\r\n        event.container.data[event.currentIndex]['FormId'] = Math.random().toString(36).substring(7) + event.currentIndex;\r\n        event.container.data[event.currentIndex]['DBColName'] += Math.random().toString(36).substring(7) + event.currentIndex;\r\n\r\n      setTimeout(()=>{\r\n        this.Form.updateAngForm();\r\n      }, 500);\r\n\r\n\r\n\r\n    }\r\n  }\r\n\r\n  createCopy(orig){\r\n    return  JSON.parse(JSON.stringify(orig))\r\n  }\r\n\r\n  onclickEvent(e:any){\r\n    let action = e.action;\r\n    if(this.service[action]) {\r\n        let param = e.data\r\n        this.service[action](param);\r\n    }\r\n  }\r\n\r\n  submitDesign(){\r\n    var data:any = [];\r\n    var LNo = 1;\r\n    this.done.forEach(element => {\r\n      for(var key in element) {\r\n        if(key != 'Options'){\r\n          data.push(\r\n            {\r\n              'header': key,\r\n              'liNo': LNo,\r\n              'pageMasterId': this.ModuleID,\r\n              'value': JSON.stringify(element[key]),\r\n            }\r\n          )\r\n        }\r\n      }\r\n      LNo++;\r\n    });\r\n    this.tableandform.CreateFormData(data).subscribe(\r\n      data => {\r\n        if(data['status'] == 1){\r\n          this.messageService.add({severity:'success', summary: data['message'], detail:''});\r\n          setTimeout(()=>{\r\n            this.location.back();\r\n          }, 500)\r\n        }\r\n        else{\r\n          this.messageService.add({severity:'success', summary: 'Error:', detail:data['errorMessage']});\r\n        }\r\n      },\r\n      error => {this.messageService.add({severity:'success', summary: error, detail:data['errorMessage']});}\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"<div class=\\\"animated fadeIn\\\" >\\r\\n    <div class=\\\"row\\\" cdkDropListGroup>\\r\\n      <div class=\\\"col-md-2\\\">\\r\\n        <div class=\\\"card zero-padd\\\">\\r\\n          <div class=\\\"card-body\\\">\\r\\n            <div  cdkDropList class=\\\"example-list\\\"  #todoList=\\\"cdkDropList\\\" [cdkDropListData]=\\\"formItems\\\" >\\r\\n                <div  class=\\\"form-container-box md-4 w-100 btn btn-success\\\" (click)=\\\"submitDesign()\\\">\\r\\n                  Submit Form Design\\r\\n                </div>\\r\\n                <div  class=\\\"form-container-box md-4 example-box\\\" *ngFor=\\\"let item of formItems\\\" cdkDrag>\\r\\n                  <i class=\\\"fa {{item.icon}} fa-lg mr-4 \\\"></i> {{item.FieldLable}}\\r\\n                </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-md-10\\\">\\r\\n            <div cdkDropList [cdkDropListData]=\\\"done\\\" class=\\\"example-list f\\\" (cdkDropListDropped)=\\\"drop($event)\\\">\\r\\n              <div class=\\\"example-custom-placeholder\\\" *cdkDragPlaceholder></div>\\r\\n              <app-form #Form [formData]=\\\"done\\\" [type]=\\\"'draganddrop'\\\" (onclickEvent)=\\\"onclickEvent($event)\\\"></app-form>\\r\\n            </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n  <p-toast position=\\\"top-center\\\"></p-toast>\\r\\n\\r\\n  \";","export default \".zero-padd .card-body {\\n  padding: 0px;\\n}\\n.zero-padd .card-body .md-4 {\\n  padding: 15px 20px;\\n  border-bottom: 1px solid #e2e2e2;\\n}\\n.example-list {\\n  width: 500px;\\n  max-width: 100%;\\n  border: solid 1px #ccc;\\n  min-height: 60px;\\n  display: block;\\n  background: white;\\n  border-radius: 4px;\\n  overflow: hidden;\\n}\\n.example-list.f {\\n  width: 100%;\\n  max-width: 100%;\\n  border: solid 1px #ccc;\\n  min-height: 70vh;\\n  display: block;\\n  background: #fff;\\n  border-radius: 4px;\\n  overflow: hidden;\\n}\\n.example-box {\\n  padding: 20px 10px;\\n  border-bottom: solid 1px #ccc;\\n  color: rgba(0, 0, 0, 0.87);\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  box-sizing: border-box;\\n  cursor: move;\\n  background: white;\\n  font-size: 14px;\\n}\\n.cdk-drag-preview {\\n  box-sizing: border-box;\\n  border-radius: 4px;\\n  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12);\\n}\\n.cdk-drag-placeholder {\\n  opacity: 1;\\n}\\n.cdk-drag-animating {\\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n}\\n.example-box:last-child {\\n  border: none;\\n}\\n.example-list.cdk-drop-list-dragging .example-box:not(.cdk-drag-placeholder) {\\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n}\";","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport {FormbuilderComponent} from './formbuilder.component';\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: FormbuilderComponent,\r\n    data: {\r\n      title: 'Form Builder'\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class FormbuilderRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { FormbuilderRoutingModule } from './formbuilder-routing.module';\r\nimport {FormbuilderComponent} from './formbuilder.component';\r\nimport { FormComponent } from '../../containers/form/form.component';\r\nimport {PrimengcompModule} from '../../primengcomp/primengcomp.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [FormbuilderComponent, FormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormbuilderRoutingModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    DragDropModule,\r\n    PrimengcompModule,\r\n  ]\r\n})\r\nexport class FormbuilderModule { }\r\n"]}